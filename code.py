# -*- coding: utf-8 -*-
"""Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJdDrp3nymWxqRrWF9ibJLeIJIKj1cAE

# **Basic Questions (Attepmpt any 8)**

#1.How many unique students are included in the dataset
"""

import pandas as pd

# Read the Excel file
data = pd.read_excel('Data analyst Data.xlsx')

# Count the unique students based on their email IDs
unique_students_count = data['Email ID'].nunique()

print("Number of unique students in the dataset:", unique_students_count)

"""#2.What is the Average GPA of students"""

# Calculate the average GPA
average_gpa = data['CGPA'].mean()

print("Average GPA of students:", average_gpa)

"""#3.What is the distribution of students across different graduation years"""

# Count the number of students for each unique graduation year
distribution = data['Year of Graduation'].value_counts()

print("Distribution of students across different graduation years:")
print(distribution)

"""#4.What is the distribution of students experience with python programming"""

# Count the number of students for each unique experience level with Python
experience_distribution = data['Experience with python (Months)'].value_counts()

print("Distribution of students' experience with Python programming (Months):")
print(experience_distribution)

"""#5.What is the average family income of the student"""

def preprocess_income_range(income_range):
    if income_range == '7 Lakh+':
        return 7.5  # Assuming the midpoint of the range
    elif income_range == '0-2 Lakh':
        return 1.0
    elif income_range == '5-7 Lakh':
        return 6.0
    elif income_range == '2-5 Lakh':
        return 3.5
    else:
        return None

# Preprocess family income
data['Family Income'] = data['Family Income'].apply(preprocess_income_range)

# Calculate the average family income
average_income = data['Family Income'].mean()

print("Average family income of students:", average_income)

"""#6.How does the GPA vary among different colleges (show upto 5 results only)"""

# Calculate the average GPA for each unique college
college_gpa = data.groupby('College Name')['CGPA'].mean().sort_values(ascending=False)

# Display the top 5 results
print("Top 5 colleges based on average GPA:")
print(college_gpa.head(5))

"""#7.Are there any outliers in the quantity (number of courses completed) attribute"""

# Calculate the interquartile range (IQR)
Q1 = data['Quantity'].quantile(0.25)
Q3 = data['Quantity'].quantile(0.75)
IQR = Q3 - Q1

# Define the upper and lower bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identify outliers
outliers = data[(data['Quantity'] < lower_bound) | (data['Quantity'] > upper_bound)]
if len(outliers)>=1:

    print("Outliers in the 'Quantity' column:")
    print(outliers['Email ID'],outliers['Quantity'])
else:
  print('NO Outliers')

"""#8.What is the average GPA for student from each city"""

# Calculate the average GPA for each city
average_gpa_by_city = data.groupby('City')['CGPA'].mean()

print("Average GPA for students from each city:")
print(average_gpa_by_city)

"""# **Moderate Questions (Attempt any 8)**

#10.How many students from various cities (Solve using data visualisation tool)
"""

import matplotlib.pyplot as plt
import numpy as np
# Count the number of students for each unique city
city_counts = data['City'].value_counts()

# Select the top 10 cities with the highest number of students
top_cities = city_counts.head(10)

# Plot the bar chart for top 10 cities
plt.figure(figsize=(10, 6))
top_cities.plot(kind='bar', color='skyblue')
plt.title('Top 10 Cities with Highest Number of Students')
plt.xlabel('City')
plt.ylabel('Number of Students')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Plot the grouped bar chart for all cities
plt.figure(figsize=(15, 8))
all_cities = city_counts[:20]  # Adjust this number based on the number of cities you want to display
all_cities.plot(kind='bar', color='skyblue')
plt.title('Number of Students from Various Cities')
plt.xlabel('City')
plt.ylabel('Number of Students')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""#11.How does the expected salary vary based on factors like GPA, Family Income, Experience with python"""

import seaborn as sns
# Scatter plot with GPA vs. Expected Salary
sns.scatterplot(data=data, x='CGPA', y='Expected salary (Lac)')
plt.title('GPA vs. Expected Salary')
plt.xlabel('CGPA')
plt.ylabel('Expected Salary (Lac)')
plt.show()

# Scatter plot with Family Income vs. Expected Salary
sns.scatterplot(data=data, x='Family Income', y='Expected salary (Lac)')
plt.title('Family Income vs. Expected Salary')
plt.xlabel('Family Income')
plt.ylabel('Expected Salary (Lac)')
plt.show()

# Scatter plot with Experience with Python vs. Expected Salary
sns.scatterplot(data=data, x='Experience with python (Months)', y='Expected salary (Lac)')
plt.title('Experience with Python vs. Expected Salary')
plt.xlabel('Experience with Python (Months)')
plt.ylabel('Expected Salary (Lac)')
plt.show()

# Regression analysis
sns.lmplot(data=data, x='CGPA', y='Expected salary (Lac)')
plt.title('Linear Regression: GPA vs. Expected Salary')
plt.xlabel('CGPA')
plt.ylabel('Expected Salary (Lac)')
plt.show()

sns.lmplot(data=data, x='Family Income', y='Expected salary (Lac)')
plt.title('Linear Regression: Family Income vs. Expected Salary')
plt.xlabel('Family Income')
plt.ylabel('Expected Salary (Lac)')
plt.show()

sns.lmplot(data=data, x='Experience with python (Months)', y='Expected salary (Lac)')
plt.title('Linear Regression: Experience with Python vs. Expected Salary')
plt.xlabel('Experience with Python (Months)')
plt.ylabel('Expected Salary (Lac)')
plt.show()

"""#12.Which event tend to attract more students from specific field of study"""

# Filter the data for students
student_data = data[data['Designation'] == 'Students']

# Count the occurrences of events for students
event_counts_for_students = student_data['Events'].value_counts()

# Find the event with the most occurrences for students
most_common_event_for_students = event_counts_for_students.idxmax()

print("Event that attract Most students:", most_common_event_for_students)

"""#13.Do students In Leadership Position during their college years tend to have higher GPAs or better expected salary"""

# Calculate the average GPA and expected salary for students in leadership positions
leadership_students = data[data['Leadership- skills'] == 'yes']
avg_gpa_leadership = leadership_students['CGPA'].mean()
avg_salary_leadership = leadership_students['Expected salary (Lac)'].mean()

# Calculate the average GPA and expected salary for students not in leadership positions
non_leadership_students = data[data['Leadership- skills'] == 'no']
avg_gpa_non_leadership = non_leadership_students['CGPA'].mean()
avg_salary_non_leadership = non_leadership_students['Expected salary (Lac)'].mean()

print("Average GPA of students in leadership positions:", avg_gpa_leadership)
print("Average expected salary of students in leadership positions:", avg_salary_leadership)
print("Average GPA of students not in leadership positions:", avg_gpa_non_leadership)
print("Average expected salary of students not in leadership positions:", avg_salary_non_leadership)

"""#14.How many students are Graduating by the end of 2024"""

# Find unique students based on their email IDs
unique_students = data.drop_duplicates(subset='Email ID')

# Filter the unique students dataset for those graduating by the end of 2024
graduating_2024_unique = unique_students[unique_students['Year of Graduation'] <= 2024]

# Count the number of students graduating by the end of 2024
num_graduating_2024_unique = len(graduating_2024_unique)

print("Number of unique students graduating by the end of 2024:", num_graduating_2024_unique)

"""#15.Which Promotion channel brings in more student participations for the event"""

# Group the data by promotion channel and count the number of attendees
promotion_channel_counts = data.groupby('How did you come to know about this event?')['Quantity'].sum()

# Find the promotion channel with the highest attendance
max_attendance_channel = promotion_channel_counts.idxmax()
max_attendance = promotion_channel_counts[max_attendance_channel]

print("Promotion channel with the highest attendance:", max_attendance_channel)
print("Number of attendees from this channel:", max_attendance)

"""#16.Find the total number of students who attended the events related to Data Science (From all Data science related courses)"""

# Define keywords related to Data Science
data_science_keywords = ['Data Science', 'Data Visualization', 'AI', 'ML','Artificial']

# Filter the dataset for events related to Data Science using keywords
data_science_events = data[data['Events'].str.contains('|'.join(data_science_keywords), case=False)]

# Calculate the total number of students who attended Data Science events
total_attendees_data_science = data_science_events['Quantity'].sum()

print("Total number of students who attended Data Science events:", total_attendees_data_science)

"""#17.Those who have high CGPA and More experience in language those who had high expectations for salary? (AVG)"""

# Define the criteria for filtering
high_cgpa_threshold = 8.0  # Example threshold for high CGPA
high_experience_months = 6  # Example threshold for high experience in Python (months)

# Filter the dataset based on the criteria
filtered_data = data[(data['CGPA'] >= high_cgpa_threshold) & (data['Experience with python (Months)'] >= high_experience_months)]

# Calculate the average expected salary for the filtered students
average_salary_high_cgpa_high_experience = filtered_data['Expected salary (Lac)'].mean()

print("Average expected salary for students with high CGPA and more experience in Python:", average_salary_high_cgpa_high_experience,'in lacs')

